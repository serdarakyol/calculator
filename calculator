#!/usr/bin/env bash
set -e
SOURCE="${BASH_SOURCE[0]}"
ROOT_DIR="$(dirname "$(realpath ${SOURCE})")"
DIST_FOLDER=${ROOT_DIR}/dist

function displayUsage() {
    echo "
Usage: $0 <command>
<command>:
    help
        Display this help message.
    build-jar
        Build jar file
    code-run
        Runs containerized app
    test-coverage-report
        Shows unit test coverage reports
    prepare-report
        Prepares the report to send the developer for debugging
"
}

function error_msg () {
    local COLOR_RED="$(tput setaf 9 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_RED}ERROR: "$@" ${SOURCE} line ${BASH_LINENO[0]} ${COLOR_RESET}" 1>&2;
    exit 1
}

function info_msg () {
    local COLOR_GREEN="$(tput setaf 10 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_GREEN}INFO: "$@"${COLOR_RESET}" 1>&2;
}

function warn_msg () {
    local COLOR_YELLOW="$(tput setaf 3 2>/dev/null || :)"
    local COLOR_RESET="$(tput sgr0 2>/dev/null || :)"
    echo "${COLOR_YELLOW}WARNING: "$@"${COLOR_RESET}" 1>&2;
}

function checkMaven() {
    # Check maven if installed or not. If not install
    if ! [ -x "$(command -v mvn --version)" ]; then
        echo "Installing maven"
        apt install maven
    fi
}

function buildJar() {
    checkMaven
    mvn clean package && info_msg "Jar file built succesfully" || error_msg "Jar file could not build"
}

function codeRun() {
    docker compose up --build
}

function testCoverageReport() {
    checkMaven
    # mvn generates test coverage in this file by default
    local REPORT_FILE=${ROOT_DIR}/target/site/jacoco/index.html
    local REPORT_FOLDER=${ROOT_DIR}/target/site/jacoco
    local OUT_FILE=${DIST_FOLDER}/unit-test-coverage.tar.gz
    local REPORT_SUCCESS_MSG="The report visualized successfully. Generated file: ${REPORT_FILE}"
    local REPORT_ERR="Report could not visualized but file generated on: ${REPORT_FILE}"
    local TMP_DIR=$(mktemp -d)
    cd ${ROOT_DIR}
    # run test coverage
    mvn clean test jacoco:report
    # show reports
    if [ -x "$(command -v firefox -V)" ]; then
        firefox --new-window ${REPORT_FILE} && info_msg ${REPORT_SUCCESS_MSG} || warn_msg ${REPORT_ERR}
    elif [ -x "$(command -v google-chrome --version)" ]; then
        google-chrome --new-window ${REPORT_FILE} && info_msg ${REPORT_SUCCESS_MSG} || warn_msg ${REPORT_ERR}
    else
        warn_msg "The report generated but couldn't visualize. Generated file: ${REPORT_FILE}"
    fi
    if [ ! -d "${DIST_FOLDER}" ]; then
        mkdir ${DIST_FOLDER}
    fi
    cp -r ${REPORT_FOLDER} ${TMP_DIR}
    cd ${TMP_DIR}
    # rename file
    mv jacoco report
    tar -cvzf ${OUT_FILE} report/
    # check if the file exist and has a size
    [ -s ${OUT_FILE} ] && info_msg "${OUT_FILE} generated successfully" || error_msg "File could not generated"
    rm -rf ${TMP_DIR}
}

function prepareReport() {
    local LOG_DIR=/tmp/serdar/calculator
    local TAR_FILENAME=calculator-report.tar.gz
    local TAR_FILE=${DIST_FOLDER}/${TAR_FILENAME}
    cd ${LOG_DIR}
    tar -cvzf ${TAR_FILENAME} calculator.log
    if [ ! -d "${DIST_FOLDER}" ]; then
        mkdir ${DIST_FOLDER}
    fi
    mv ${LOG_DIR}/${TAR_FILENAME} ${DIST_FOLDER}
    # check if the file exist and has a size
    [ -s ${TAR_FILE} ] && info_msg "The report genereted successfully: ${TAR_FILE}" || error_msg "Report could not generated!"
}

function main() {
    case "${1-notset}" in
        help)
            displayUsage
            ;;
        build-jar)
            buildJar "${@}"
            ;;
        code-run)
            codeRun "${@}"
            ;;
        test-coverage-report)
            testCoverageReport "${@}"
            ;;
        prepare-report)
            prepareReport "${@}"
            ;;
        *)
            >&2 echo "Error: Unknown command: '${1-}'"
            >&2 displayUsage
            exit 1
    esac
}

main "$@"
